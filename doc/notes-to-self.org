* Technical Workflows
** Exporting from InDesign

Over 2012--2014, JFDI developed boilerplate in InDesign.

As part of the Legalese project we migrate the authoritative master from InDesign into Legalese's Github repository as XML.

We document here the process for migrating the authoritative boilerplate from InDesign into Legalese.

*** Important Files and Folders

**** Master Indesign Template
/00 founder agreement.indd/ is the most up-to-date format template.

We assume you are now working with SomeOtherBoilerplate.indd.

From /00 founder agreemend.indd/, load:
- all text styles
- tags
- styles to tags

Note that this file has grep styles stripped from the file.

([[*Importing%20Into%20InDesign][Subsequently when you import filled XML into InDesign]] you'll want to use a Text Styles document which has the GREP styles.)

**** Folder Structure

***** build/10-indesign2xml

XML files exported from InDesign boilerplate

***** build/20-xmlmasters

XML files xml_pp'ed from the indesign2xml export

***** build/30-xmltemplates

containing <? ?>

***** build/40-htmltemplates

after piping through xml2html, contains <? ?>

these files are mastered out to the Google Apps Script Add-On Script Gallery Folder.

The Legalese Google Apps Add-On is responsible for creating a form, filling the spreadsheet, and generating XML and HTML filled documents which contain particulars. Those filled documents are placed into a set of folders under the Legalese Root folder.

Google Drive syncs any folders thus created onto the local filesystem.

***** Legalese Root

A Node script keeps an eye on the Legalese Root tree and notices when new folders are created.

It renames files according to their Google Document ID.

It updates the 00-tracker folder.

***** build/00-tracker

Keeps track of what state the system is in, and of what state each file is in.

Multiple scripts refer to and update this tracker folder.

If you are familiar with procmail you will have an idea of how the multiple scripts are supposed to cooperate.

***** build/50-xml2indesign

*.xml are XML files filled by Google Apps Script's HTMLTemplate.

Those XML files contain a set of nonprinting processing instructions in a special XML tag tree which indicates which email addresses need to sign the documents.

Any filled XML files have a unique filename. They are tracked in the 00-tracker folder, so that we don't process the same document twice.

an InDesign idleTask script monitors that folder and creates the following:

*.indd are filled by those XML files

*.pdf are exported by INDD.

***** build/60-indesign2pdf

The last thing the InDesign script does is mv the exported PDFs into build/60-indesign2pdf

***** build/70-pdf2echosign

The Legalese spreadsheet has another script function -- sendToEchosign.

EchoSign offers Oauth-based API integration.
https://developers.google.com/apps-script/guides/services/external

Legalese monitors the appropriate folder under /Legalese Root/ for new PDFs that have been produced by InDesign.

The script processes them by:
1. recording a column in the spreadsheet indicating that the upload-to-echosign workflow has begun
2. uploading them to EchoSign
3. recording a column in the spreadsheet indicating that the upload completed

If the upload fails for some reason then at least the record in the first step prevents the script from doing it twice.


*** Procedure
**** Map Styles to Tags
In the tags pane, map styles to tags
**** Export as XML
to the folder build/indesign2xml

**** run xml_pp -s format_c < indesign2xml/SomeOtherBoilerplate.xml > 

20150310-00:13:33 mengwong@venice:~/non-db-src/legalese/templates/jfdi.asia% perl -ple 's/<\/?i>//g' < ~/non-db-src/legalese/templates/jfdi.asia/rcps\ subscription\ agreement.xml | xml_pp -s record  > jfdi_2014_rcps.xml

20150412-20:25:40 mengwong@venice:~/non-db-src/legalese-gh-pages/templates/ycombinator-safe% perl -ple 's/<\/?i>//g; s/&#8221;/"/g; s/&#8220;/"/g; s/&#8217;/'"'"'/g;  
' < safe_cap_orig.xml | xml_pp -s record  > safe_cap.xml

blow away all leading spaces
(replace-regexp "^ *" "" nil (if (and transient-mark-mode mark-active) (region-beginning)) (if (and transient-mark-mode mark-active) (region-end)))

sometimes there will be opening tags that appear by themselves on a line. delete the terminal newline.
**** set whitespace-handling

it may be necessary to set <?whitespace-handling use-tags?>

**** it may be necessary to add a restart=true attribute to certain paragraphs

**** get rid of extraneous m(s+</)

**** for the sake of readability in the XML side, change
| 8220 | " |
| 8221 | " |
| 8217 | ' |

*** Migrated Documents
**** TODO 00 founder agreement.indd

the first doc signed between JFDI and the founders
**** TODO KISS(Sing) Agreement
**** TODO Darius Convertible Note Agreement
**** TODO Darius Convertible Note Termsheet
**** TODO Volunteer Agreement
**** 

** Importing Into InDesign

The template document should have GREP styles restored. Compare with 00 founder agreement.xml.

* Business Workflows

Legalese supports two major workflows:

** Founder Agreement Onboarding
When teams join JFDI they sign a number of papers which help JFDI get its investment into the startup ASAP.

** Seed Round Investment
Where third-party angels join a round led by the teams.


* Spreadsheets and Data Model
** A Spreadsheet contains one or more Sheets
** A Sheet contains one or more Sections
** There must be a Sheet named "Parties"
** The Parties Sheet must have a Section named "PARTIES"
** The PARTIES Section must have an entry of type "Company"
This is known as the Principal.
** There MAY be a Sheet named "Events"
** There MAY be a Sheet with any other name, e.g. "Agreements"
** Any Sheet may have a section named "TERMS".
We also accept "KEY TERMS" for backward compatibility.
** Internally, we maintain an Entity Relationship model.
The system knows about Entities. Each Entity has properties.
The system knows about Relations between Entities. Each Relation has properties.
** Each row in "PARTIES" establishes two things: an entity, and a relation.
*** The "Company" row
**** establishes an Entity
for example, TwitShit, with UEN 000
**** establishes a PRINCIPAL SELF relation with the company.
The Principal entity for this spreadsheet will be TwitShit and all relations are assumed to be relative to that entity.
*** Any other type of row
**** establishes another Entity
for example, Alice with NRIC 111
**** establishes a HAS-A relation between the company and that Entity
The first column of the row may be "Shareholder", in which case TwitShit HAS-A Shareholder named Alice.
** The Parties Sheet MAY have a Section named "ROLES"
This sets out other relationships between parties previously declared. Each relationship may have other properties.

For example, Alice is also a Director of the Company.
*** Each relationship has a start_date and an end_date.

** A Sheet may have a special Section named INCLUDE.
Through this mechanism, one sheet may include the parties, roles, and terms defined by another.
** Parties are global.
Any Parties defined via INCLUDE sections are treated the same way -- they are tracked in the Parties data structure.
** Party Names must be unique.
Maybe in future we should define a composite unique primary key across their idtype/id instead of the name.
** Relations are relative to the principal.
In an INCLUDEd sheet, all relations are relative to the Principal Party defined in that sheet.

** A given Agreement needs to know who to mail and how to track the mailings.
*** TODO So each Template needs to have a Legalese Status column for that template.
** Entities are known to the system.
** Parties are only meaningful in the context of a specific agreement.
** Entities are mapped to Parties for the purpose of a specific agreement by a Template DTD.
** Docsets are collections of Templates
** readRows object contains the parsed representation of the spreadsheet

*** readRows.templatedata

*** readRows.config

*** readRows.entitiesByName

** How INCLUDE works, in detail

*** Suppose we have the following givens:

**** a sheet named *Twitshit's Founder Docset*
**** /Twitshit's Founder Docset/ INCLUDEs a sheet in the same spreadsheet named *Twitshit Entities*
**** /Twitshit Entities/ INCLUDEs a sheet from another spreadsheet named *JFDI.2014 Entities*
**** /JFDI.2014 Entities/ INCLUDEs a sheet from another spreadsheet named *JFDI.Asia Entities*
**** /JFDI.Asia Entities/'s ENTITIES section defines Corporate Secretary: / Prima Management Services
**** /JFDI.Asia Entities/'s ROLES section defines Accountant / Prima Management Services

*** What is possible?

**** /Twitshit's Founder Docset/ can freely refer to Prima Management Services
because it is defined somewhere in the include path.

**** /Twitshit's Founder Docset/ has .parties automatically populated

the roles show in /Twitshit Entities/ are provided under .parties

the full details for those parties are available, extracted from the include chain

*** What are the relationships?
**** /Twitshit's Founder Docset/'s readRows_() returns a readRows object
The readRows object is useful for two purposes:
***** for constructing a docset with one or more template PDFs
***** for describing a bunch of entities that some other docset needs to know about
**** a readRows object has the following properties:
***** terms
***** config
***** principal: usually a Company Entity, that relates to other entities in the readRows object
**** an entityName is a string drawn from the "name" field of the Entity table.
they must be unique across the entire include path
**** there is a "global" shared variable, entitiesByName: a dictionary of entityNames to Entities
*** an Entity object has the following properties:
***** roles: a dictionary of roleNames to a list of entityNames
for example, someCompany.roles.shareholder = ["Alice", "Bob"]

you can think of this as:
- someCompany has-a shareholder Alice
- someCompany has-a shareholder Bob

***** _role: the inverse relationship
for example, alice._role.shareholder = ["someCompany"]

you can think of this as:
- alice is-a shareholder in someCompany

**** how does one INCLUDEd entity relate to another INCLUDEd entity?
from the example above, the desired data structure is:
***** /Twitshit's Founder Docset/ returns a readRows object
***** readRows.principal = Twitshit
***** Twitshit.roles.investor = ["JFDI.2014"]
***** readRows.entitiesByName = {"JFDI.2014": jfdi2014, ...}
***** jfdi2014 is a Company Entity whose sheet INCLUDEs JFDI.Asia Entities
***** jfdi2014.roles.investor = ["JFDI.Asia", ...]
***** jfdiAsia is a Company Entity
***** jfdiAsia.roles.investor = ["Hugh Mason", "Meng Weng Wong"]
***** readRows.terms.parties = { investor: [ jfdi2014, ... ], ... }
**** observations
***** note that while an INCLUDE returns a readRows object, the terms and config of that readRows object are discarded
***** the entitiesByName is not discarded
in fact there is only one entitiesByName dictionary which is shared throughout the include chain
***** the principal is discarded
because it is in entitiesByName
***** everything flattens thanks to entitiesByName, really.
***** TODO in the future it would be nice to have an extended syntax
for instance, i need all the investors to sign something
if the investor is a company then i need all the directors to sign it

** Conventions In Practice
*** JFDI Legalese Master Index                                                       :spreadsheet:
**** Startups                                                                             :sheet:
***** batch                                                                                :col:
***** jfdi portfolio                                                                       :col:
- jfdi.2012
- jfdi.2013
- jfdi.2014
***** name                                                                                 :col:
hyperlink to the company spreadsheet for each startup
***** status                                                                               :col:
***** financials                                                                           :col:
**** JFDI Companies                                                                       :sheet:
***** name                                                                                 :col:
=HYPERLINK to the company spreadsheet for each startup
- jfdi.2012
- jfdi.2013
- jfdi.2014
*** Company                                                                  :company:spreadsheet:
**** Entities                                                                             :sheet:
**** Events                                                                               :sheet:
**** Constitutional                                                                :docset:sheet:
***** memorandum of association                                                   :template:row:
***** articles of association                                                     :template:row:
***** shareholder agreement                                                       :template:row:
***** class f agreement                                                           :template:row:

**** Financing Round - JFDI                                                        :docset:sheet:
***** founder agreement                                                           :template:row:
***** convertible loan agreement                                                  :template:row:
***** DORA                                                                        :template:row:
***** directors' resolutions                                                      :template:row:
***** instructions to corporate secretary                                         :template:row:
*** Sequence of Includes

- a Startup's Entities Sheet describes the startup itself and INCLUDEs its investing entity JFDI.201X
- JFDI.201X's Entities Sheet describes the fund itself and INCLUDEs its ordinary shareholder JFDI.Asia
- JFDI.Asia's Entities Sheet describes JFDI.Asia itself and also defines corpsec, acra, etc.

if a Startup has multiple subsidiaries then we extend the chain in the opposite direction so that the subsidiary INCLUDEs the startup.
*** mapping email address to a PDF
**** problem 1: how many emails should a signer receive?
a given docset may contain multiple templates. when we "send to echosign" we wish to submit all the templates in that docset to EchoSign for signature, at once.
***** alternatives
****** echosign's preference: concatenate the PDFs into one
all the PDFs get joined into a single document. a recipient receives one email containing the concatenate.
****** the naive approach: keep each PDF separate.
send multiple emails -- one for each output PDF.
***** decision
for now, we adopt the naive approach, at the risk of sending too many things out via echosign.

we may want to change this decision later if the human factors department reports that end-users get confused by the deluge and end up failing to sign all the agreements.

**** problem 2: how do we keep track of the esnums?
echosign analyzes the name of the signaturebox to map email address to box.
the legalese system generates the PDFs in one step, and submits the PDFs in a separate step.
those two steps need to be synchronized so the recipients don't end up putting their signature in the wrong box.
***** complication 1: our architecture SHOULD work for both [[*alternatives][alternatives]] described in problem 1 above.
each agreement we upload to echosign contains one or more individual PDFs.
***** complication 2: handling explosions.
there are two cases. some templates are all-in-one, and some are one-per-partype.
any exploded messages will exclude themselves from the concatenation.
**** draft design
***** ERM
a docset contains one or more templates.
a template contains one or more PDFs (one normally, more if "explode" is set).
a PDF contains one or more signers. (To:)
a PDF contains one or more CCs.
***** the Rcpts object
the Rcpts object is 1:1 with an uploaded agreement.
it contains a list of To and CC addresses.
Each To address is mapped to a consecutive esnum starting at 1.
***** esnum serialization
if we are in concatenate mode, we upload a docset to echosign, so the Rcpts object spans multiple PDFs.
if we are in non-concatenate mode, we upload an individual PDF to echosign, so we create one Rcpts per PDF.
***** the proposed sequence
****** first, deal with all the exploding templates
for each exploding template in the docset, we expand the parties specified in the SourceTemplate object
there has to be a 1:1 correspondence with the parties in the signature block
******* TODO maybe in future we just create a <?!= signatureblock() ?> from code.gs
the controller knows exactly which parties are going to be signing, so why shouldn't it just take charge?
maybe because there are different display style -- sometimes you want to give each partytype its own b_left_sidehead_nonum
****** then, deal with the non-exploding templates
******* if we are in concatenate mode, we will upload all the non-exploding templates together
******** establish the full set of To and CC recipients for the entire PDF group
dedup
******** and esnum accordingly.
******* if we are not in concatenate mode, we upload each PDF separately
******** for each PDF, establish the set of To and CC recipients
******** and esnum accordingly

***** explode mode
****** TODO there seems to a bug where multiple of the same party get appended to a .parties[x] array.
****** the exploder

the sourceTemplate object defines explode=x, where x is a single name of the partytype to be exploded.

as long as the parties don't get reordered in the source spreadsheets, the ordering should be preserved across repeated runs.



***** Rcpts([template, ...], explodeEntity)
called in both steps, returns the same each time:
{ to: [ an   ordered unique list of email addresses ],
  cc: [ an unordered unique list of email addresses ] }

these lists are computed over the set of one or more templates passed in the input.

it follows that      esnum = to.indexOf("address") + 1

and the list of email addresses must be submitted to echosign in that order

****** the sourceTemplate object declares the "to" and "cc" entities.

****** in exploded templates, Rcpts must be called with only one template in the list, and explodeEntity set.

****** in non-exploded templates, in concatenate mode, Rcpts is called with multiple templates in the list

****** in non-exploded templates, in non-concatenate mode, Rcpts is called with one template in the list.

****** whatever code does exploding needs to explode outside of Rcpts, so it can iterate explodeEntity.
***** function docsetEmails(readRows, concatenateMode=true|false)
returns
{ exploders : { "templateTitle for X" : { to:[], cc:[] },
                "templateTitle for Y" : { to:[], cc:[] },
                ... },
  normals   : { templateTitle         : { to:[], cc:[] } },
              { templateTitle         : { to:[], cc:[] } },
              ... }

note that the keys in templateTitle MUST correspond exactly to the filenames of the PDFs in Google Drive.

***** syntax of the sourceTemplate .parties and .explode properties
explode: roleName
parties:{ to:["roleName",    // e.g. shareholder
              "roleName[i]", // e.g. shareholder[0]
             ],
          cc: [ ... ] // as above
        }

if an "explode: roleName" property is present, then the expanded roleName will be automatically appended to the "to" list, and will be available in the template not as data.parties.roleName but as data.roleName, just as data.company is available.
***** how the Generate PDFs workflow uses this
when generating the PDFs, code.gs first establishes the full docsetEmails data structure

as each template is filled, the .templatedata (aka data.) is configured with es_nums: each entity gets an es_num property.

thus are the signatureboxes in the PDFs correctly labeled.

***** how the Send To Echosign workflow uses this
when sending to echosign, we again run the docsetEmails function to obtain the same data structure as was used to generate the PDFs.

the uploadAgreements function can operate in concatenate mode or not.

if concatenateMode == true, then 1 agreement will be uploaded that combines all the normals, and 1 agreement for each exploding PDF.

if concatenateMode == false then, then N normal agreements plsu M exploding agreements.

the uploader knows how to key into the data structure to pull out the correct to/cc set.

